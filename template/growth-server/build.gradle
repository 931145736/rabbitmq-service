group 'com.qingshuo.growth_system'
description '成长系统服务'
version = '1.0'

ext {
    springCloudVersion = 'Finchley.SR2'
    fastjsonVersion = '1.2.54'
    mybatisVersion = '1.3.2'
    druidVersion = '1.1.0'
    pagehelperVersion = '4.1.6'
    feignVersion = '1.4.4.RELEASE'
    disruptorVersion = '3.3.6'
    zipkinVersion = '2.11.1'
}
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    // 排除 logback 依赖（使用 log4j2）
    implementation('org.springframework.boot:spring-boot-starter-log4j2') {
        exclude module: "spring-boot-starter-logging"
        exclude module: "logback-classic"
        exclude module: "ch.qos.logback"
    }
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation('org.springframework.boot:spring-boot-starter-data-redis')
    implementation('org.springframework.boot:spring-boot-starter-web') // web
    implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisVersion}") //mybatis
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-hystrix') // hystrix断路器
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-ribbon') //ribbon 负载均衡

    runtimeOnly('mysql:mysql-connector-java:5.1.35')
    compile("com.alibaba:druid-spring-boot-starter:${druidVersion}") //druid 连接池
    compile('redis.clients:jedis') // jedis
    compile("com.alibaba:fastjson:${fastjsonVersion}") //alibaba fastjson

    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client') //eureka注册中心客户端
    compile("com.github.pagehelper:pagehelper:${pagehelperVersion}") //分页插件
    compile("org.springframework.cloud:spring-cloud-starter-feign:${feignVersion}") //feign 声明式服务调用 伪RPC
    compile("org.springframework.boot:spring-boot-devtools")//热启动
    compile("org.springframework.cloud:spring-cloud-starter-sleuth")
// sleuth 链路追踪 显示格式 [application name, traceId, spanId, export]  application name — 应用的名称 traceId — 为一个请求分配的ID号 spanId — 表示一个基本的工作单元 export — 布尔类型。表示是否要将该信息输出到类似Zipkin这样的聚合器进行收集和展示
    compile("org.apache.curator:curator-framework") //ZK curator客户端
    compile("org.springframework.cloud:spring-cloud-starter-zipkin") //zipkin 分布式跟踪系统
    compile("org.springframework.cloud:spring-cloud-stream-binder-rabbit")
    compile("net.logstash.logback:logstash-logback-encoder:5.1") //logback 推送日志文件到logstash
    compile("com.github.tobato:fastdfs-client:1.26.4")
    compile("com.ctrip.framework.apollo:apollo-client:1.1.0")
    compile('com.qingshuo.commom:qs-common:1.0.0-RELEASE')
    compile('com.qingshuo.userservice:user_client:1.0')



}
def clientName = 'growth_client'
task makeClientJar(type:Jar) {
    delete 'build/libs/'+clientName+'_'+version+'.jar'
    baseName = clientName
    //只打包org.cmdmac下的org.cmdmac.pluginsdk.impl和org.cmdmac.gamecenter,其他子包不会被打包进去
    def srcClassDir = [project.buildDir.absolutePath + "/classes/java/main"]
    from srcClassDir
    //需要打包的类
    include('com/qingshuo/growthservice/dto/*.class')
    include('com/qingshuo/growthservice/entity/*.class')
    include('com/qingshuo/growthservice/feignclients/*.class')
}
// 指定上传的路径

def localMavenRepo = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath

// 上传Task，Gradle会生成并上传pom.xml文件。
uploadArchives() {
    repositories {
        mavenDeployer {
            repository(url: localMavenRepo)
            name = clientName
            //构造项目的Pom文件
/*            pom.project {
                name = clientName
                version = '1.0.0'   //当前项目版本  0.0.1
                packaging = 'jar'
            }*/
        }

    }
}


apply plugin: 'maven-publish'
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId group
            version = version
            artifactId clientName
            // Tell maven to prepare the generated "*.jar" file for publishing
            def artifactPath = "$buildDir/libs/${clientName}-${version}.jar"
            println(artifactPath)
            artifact(artifactPath)
        }
    }
    repositories {
        maven {
            // 指定要上传的maven私服仓库
            url = "http://114.67.225.196:8781/repository/qingshuo_dev/"
            //认证用户和密码
            credentials {
                username 'admin'
                password 'QS66618'
            }
        }
    }
}